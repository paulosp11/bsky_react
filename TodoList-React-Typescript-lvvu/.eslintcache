[{"C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\index.tsx":"1","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\reportWebVitals.ts":"2","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\App.tsx":"3","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\ContentTodoList.tsx":"4","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\HeaderTodoList.tsx":"5","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\DataTodoListRow.tsx":"6","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\FooterTodoList.tsx":"7","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\ModalAddTodo.tsx":"8","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\AlertDialog.tsx":"9"},{"size":223,"mtime":1618215919380,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1610594377000,"results":"12","hashOfConfig":"11"},{"size":2031,"mtime":1610594377000,"results":"13","hashOfConfig":"11"},{"size":819,"mtime":1610594377000,"results":"14","hashOfConfig":"11"},{"size":1929,"mtime":1610594377000,"results":"15","hashOfConfig":"11"},{"size":3835,"mtime":1610594377000,"results":"16","hashOfConfig":"11"},{"size":1264,"mtime":1610594377000,"results":"17","hashOfConfig":"11"},{"size":5982,"mtime":1618215120339,"results":"18","hashOfConfig":"11"},{"size":2393,"mtime":1610594377000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1coimv9",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"25"},"C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\index.tsx",[],["46","47"],"C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\reportWebVitals.ts",[],["48","49"],"C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\App.tsx",["50","51"],"import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport HeaderTodoList from './component/HeaderTodoList';\nimport ContentTodoList from './component/ContentTodoList';\nimport { Todo } from './model/type/todo';\nimport { gql, useQuery } from '@apollo/client';\n\nfunction dataFilter(todoList: Todo[], filter: string, keySearch: string): Todo[] {\n  if (filter === \"all\") {\n    return todoList.filter(e => { return e.todoName.toUpperCase().indexOf(keySearch.toUpperCase()) > -1 });\n  } else if (filter === \"active\") {\n    return todoList.filter(e => { return (e.isCompleted === false) && e.todoName.toUpperCase().indexOf(keySearch.toUpperCase()) > -1 });\n  } else if (filter === \"completed\") {\n    return todoList.filter(e => { return (e.isCompleted === true) && e.todoName.toUpperCase().indexOf(keySearch.toUpperCase()) > -1 });\n  };\n  return [];\n}\n\nconst GET_TODO_LIST = gql`\n  query{\n    getTodoList {\n      id\n      todoName\n      isCompleted\n      type\n      deadline\n    }\n  }\n`;\n\nfunction App() {\n  const [todoList, setTodoList] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<string>(\"all\");\n  const [keySearch, setKeySearch] = useState<string>(\"\");\n\n  const handleChangeFilter = (status: string) => setFilter(status);\n\n  const handleChangeKeySearch = (key: string) => setKeySearch(key);\n\n  const refreshTodoList = () => refetch();\n\n  const { data, refetch } = useQuery(GET_TODO_LIST, { fetchPolicy: \"network-only\" });\n  // console.log(data ? data.getTodoList : 'no data');\n\n  useEffect(() => {\n    setTodoList(data ? data.getTodoList : []);\n  });\n\n  return (\n    <div className=\"package\">\n      <div className=\"todo-page\">\n        <HeaderTodoList onChangeKeySearch={handleChangeKeySearch} onChangeRefresh={refreshTodoList} />\n        <ContentTodoList todoListFilter={dataFilter(todoList, filter, keySearch)} filter={filter}\n          onChangeFilter={handleChangeFilter} onChangeRefresh={refreshTodoList} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\ContentTodoList.tsx",[],"C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\HeaderTodoList.tsx",["52"],"import '../App.css';\nimport React, { useRef, useState } from 'react';\nimport ModalAddTodo from './ModalAddTodo';\nimport { PropsHeaderTodoList } from '../model/type/todo';\nimport { Todo } from '../model/type/todo';\n\nfunction HeaderTodoList(props: PropsHeaderTodoList) {\n    const searchHeaderEl = useRef(document.createElement(\"div\"));\n    const inputEl = useRef(document.createElement(\"input\"));\n    const [keySearch, setKeySearch] = useState(\"\");\n\n    const onSearchActiveClick = () => {\n        searchHeaderEl.current.style.display = \"flex\";\n        inputEl.current.focus();\n    };\n\n    const onSearchHiddenClick = () => {\n        searchHeaderEl.current.style.display = \"none\";\n    };\n\n    const handleChangeInput = (event: any) => {\n        setKeySearch(event.target.value);\n    };\n\n    const searchTodo = () => {\n        props.onChangeKeySearch(keySearch);\n    };\n\n    return (\n        <div className=\"header-todolist\">\n            <a data-toggle=\"collapse\" href=\"#collapseOne\">\n                <i className='fas fa-angle-down'></i>\n      Todo List\n            </a>\n            <i className=\"fas fa-search search-active\" aria-hidden=\"true\" onClick={onSearchActiveClick}></i>\n            <div className=\"search-header\" ref={searchHeaderEl}>\n                <div className=\"search\">\n                    <i className=\"fas fa-arrow-left\" aria-hidden=\"true\" onClick={onSearchHiddenClick}></i>\n                    <input type=\"text\" placeholder=\"Search...\" value={keySearch} onChange={handleChangeInput} ref={inputEl} />\n                    <div className=\"button\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Search\" onClick={searchTodo}>\n                        <i className=\"fas fa-search search-button\" aria-hidden=\"true\"></i>\n                    </div>\n                </div>\n            </div>\n            <ModalAddTodo onChangeRefresh={props.onChangeRefresh} />\n        </div>\n    );\n}\nexport default HeaderTodoList;","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\DataTodoListRow.tsx",["53","54","55","56"],"import '../App.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport AlertDialog from './AlertDialog';\nimport { PropsDataTodoListRow, Todo, TodoIsCompleted } from '../model/type/todo';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport { gql, useMutation } from '@apollo/client';\n\nconst EDIT_STATUS_TODO = gql`\n    mutation EditStatusTodo($todo: TodoUpdateInput) {\n        editStatusTodo(todo: $todo)\n    }\n`;\n\nfunction DataTodoListRow(props: PropsDataTodoListRow) {\n    const period = Math.floor((Date.parse(props.todo.deadline) - (new Date()).getTime()) / 60000); //khởi tạo khoảng thời gian sát deadline\n    const [minutesCompare, setMinutesCompare] = useState<number>(period);\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        let loopCheck = setInterval(() => {\n            const periodUpdate = Math.floor((Date.parse(props.todo.deadline) - (new Date()).getTime()) / 60000); //update khoảng time sát deadline\n            setMinutesCompare(periodUpdate);\n        }, 1000);\n        return () => {\n            clearInterval(loopCheck);\n        };\n    });\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const todo: Todo = props.todo;\n\n    const [isCompletedChange, { loading, error }] = useMutation(EDIT_STATUS_TODO);\n\n    const handleIsCompletedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        isCompletedChange({\n            variables: { todo: { id: todo.id, isCompleted: e.target.checked } }\n        });\n        props.onChangeRefresh();\n    };\n\n    const days = Math.floor(minutesCompare / 1440);\n    const timeRemaining = days + ' day(s), ' +\n        Math.floor((minutesCompare - (days * 1440)) / 60) + ' hour(s), ' +\n        Math.round(minutesCompare % 60) + ' minute(s)'\n    // console.log(\"minutesCompare\", minutesCompare);\n\n    return (\n        <>\n            <Modal show={show} onHide={handleClose} animation={false}>\n                <Modal.Header>\n                    <Modal.Title>Todo Detail</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <label>Todo Name: </label>\n                    <p>{todo.todoName}</p>\n                    <label>Type: </label>\n                    <p>{todo.type}</p>\n                    <label>Deadline: </label>\n                    <p>\n                        {moment(todo.deadline).format('DD/MM/YYYY hh:mm A')}\n                    </p>\n                    <label>Time remaining: </label>\n                    <p>\n                        {minutesCompare > 0 ? timeRemaining : \"Time Out\"}\n                    </p>\n                    <label>Status: </label>\n                    <p>{todo.isCompleted === true ? \"Completed\" : \"Active\"}</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            <li className=\"row\">\n                <div className=\"col-2\">\n                    <div className=\"round\">\n                        <input type=\"checkbox\" id={todo.id.toString()} name=\"todoName\" checked={todo.isCompleted}\n                            onChange={handleIsCompletedChange} />\n                        <label htmlFor={todo.id.toString()}></label>\n                    </div>\n                </div>\n                <div className={props.todo.isCompleted ? \"col-8 completed\" : \"col-8\"} onClick={handleShow}><span>{todo.todoName}</span></div>\n                <AlertDialog todo={props.todo} minutesCompare={minutesCompare} onChangeRefresh={props.onChangeRefresh} />\n            </li>\n        </>\n    );\n}\nexport default DataTodoListRow;","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\FooterTodoList.tsx",["57"],"import '../App.css';\nimport React from 'react';\nimport AlertDialog from './AlertDialog';\nimport { PropsFooterTodoList } from '../model/type/todo';\nimport { Todo } from '../model/type/todo';\n\nfunction FooterTodoList(props: PropsFooterTodoList) {\n\n    const handleChangeFilter = (status: string) => {\n        props.onChangeFilter(status);\n    }\n\n    const countItemLeft = () => {\n        const todoListFilter: Todo[] = props.todoListFilter;\n        let count = 0;\n        todoListFilter.forEach(e => {\n            if (e.isCompleted === false) {\n                count++;\n            };\n        });\n        return count;\n    };\n\n    return (\n        <div className=\"footer\">\n            <div className=\"count-item\">{countItemLeft()} items left</div>\n            <div className=\"filter\">\n                <div onClick={() => handleChangeFilter(\"all\")} className={props.filter === \"all\" ? \"selected\" : \"\"}>All</div>\n                <div onClick={() => handleChangeFilter(\"active\")} className={props.filter === \"active\" ? \"selected\" : \"\"}>Active</div>\n                <div onClick={() => handleChangeFilter(\"completed\")} className={props.filter === \"completed\" ? \"selected\" : \"\"}> Completed</div>\n            </div>\n        </div>\n    );\n};\n\nexport default FooterTodoList;","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\ModalAddTodo.tsx",["58","59","60","61","62","63","64","65","66","67"],"import '../App.css';\nimport React, { useState, useEffect } from 'react';\n// import { Button, Modal } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport { PropsModalAddTodo, Todo, TypeTodo, TodoAdd, ErrorFormTodo } from '../model/type/todo';\nimport { gql, useMutation, useQuery } from '@apollo/client';\n\nconst ADD_TODO = gql`\n    mutation AddTodo($todo: TodoInput) {\n        addTodo(todo: $todo)\n    }\n`;\n\nconst GET_LIST_TYPE_TODO = gql`\n    query GetListTypeTodo{\n        getListTypeTodo {\n        key\n        value  \n        }\n    }\n`;\n\nfunction ModalAddTodo(props: PropsModalAddTodo) {\n    const [show, setShow] = useState(false);\n    const [fields, setFields] = useState<TodoAdd>({} as TodoAdd);\n    const [errors, setErrors] = useState<ErrorFormTodo>({} as ErrorFormTodo);\n    const [listTypeTodo, setListType] = useState<TypeTodo[]>([]);\n    const rows: JSX.Element[] = [];\n\n    const { data } = useQuery(GET_LIST_TYPE_TODO);\n\n    useEffect(() => {\n        setListType(data ? data.getListTypeTodo : [])\n    });\n\n    const handleClose = () => setShow(false);\n\n    const handleShow = () => {\n        setFields({} as TodoAdd);\n        setErrors({} as ErrorFormTodo);\n        setShow(true);\n    };\n\n    const handleValidation = () => {\n        let pushErrors: ErrorFormTodo = {} as ErrorFormTodo;\n        let formIsValid = true;\n\n        if (fields[\"todoName\"] == undefined) {\n            pushErrors[\"todoName\"] = \"\";\n            formIsValid = false;\n        } else if (fields[\"todoName\"].length === 0) {\n            pushErrors[\"todoName\"] = \"Todo name is required\";\n            formIsValid = false;\n        }\n        if (fields[\"type\"] == undefined) {\n            pushErrors[\"type\"] = \"\";\n            formIsValid = false;\n        } else if (fields[\"type\"].length === 0) {\n            pushErrors[\"type\"] = \"Type is required\";\n            formIsValid = false;\n        };\n        if (fields[\"deadline\"] == undefined) {\n            pushErrors[\"deadline\"] = \"\";\n            formIsValid = false;\n        } else if (fields[\"deadline\"].length === 0) {\n            pushErrors[\"deadline\"] = \"Deadline is required\";\n            formIsValid = false;\n        } else if (Date.parse(fields[\"deadline\"]) < (new Date()).getTime()) {\n            let d = new Date();\n            pushErrors[\"deadline\"] = \"Cannot choose a time in the past\";\n            formIsValid = false;\n        };\n        pushErrors[\"formIsValid\"] = formIsValid;\n        setErrors(pushErrors);\n    };\n\n    const handleChangeInput = (event: React.SyntheticEvent) => {\n        const target = event.target as HTMLInputElement;\n        if (target) {\n            const value = target.type === 'checkbox' ? target.checked : target.value;\n            const name: string = target.name;\n            // fields[name] = value;\n\n            if (name === \"todoName\") {\n                fields[\"todoName\"] = value as string;\n            } else if (name === \"type\") {\n                fields[\"type\"] = value as string;\n            } else if (name === \"deadline\") {\n                fields[\"deadline\"] = value as string;\n            }\n            setFields(fields);\n            handleValidation();\n        }\n    };\n\n    const [newTodo, { loading, error }] = useMutation(ADD_TODO);\n\n    const saveAddTodo = () => {\n        newTodo({ variables: { todo: fields } });\n        props.onChangeRefresh();\n    }\n\n    return (\n        <>\n            <Button variant=\"primary\" onClick={handleShow}>\n                <i className='fas fa-plus'></i>\n            </Button>\n\n            <Modal show={show} onHide={handleClose} animation={false}>\n                {/* <Modal.Header closeButton> */}\n                <Modal.Header>\n                    <Modal.Title>Add Todo</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"form-group\">\n                        <label>Todo Name</label>\n                        <input type=\"text\" placeholder=\"Name...\" className=\"form-control\" name=\"todoName\" defaultValue={fields[\"todoName\"] || ''}\n                            onChange={handleChangeInput} onBlur={handleChangeInput} />\n                        <small>{errors[\"todoName\"] || ''}</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Type</label>\n{/*                         <select className=\"form-control\" name=\"type\" defaultValue={fields[\"type\"] || ''}\n                            onChange={handleChangeInput} onBlur={handleChangeInput}>\n                            <option value=\"\" disabled>Open this select menu</option>\n                            {listTypeTodo.forEach((type: any) => {\n                                rows.push(<option value={type.key} key={type.key}>{type.value}</option>)\n                            })}\n                            {rows}\n                        </select> */}\n                        <small>{errors[\"type\"] || ''}</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Deadline</label>\n                        <input className=\"form-control\" type=\"datetime-local\" name=\"deadline\" defaultValue={fields[\"deadline\"] || ''}\n                            onChange={handleChangeInput} onBlur={handleChangeInput} />\n                        <small>{errors[\"deadline\"] || ''}</small>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n            </Button>\n                    <Button variant=\"primary\" \n                    // <Button variant=\"primary\" disabled={(errors[\"formIsValid\"] || false) === false ? true : false}\n                        onClick={() => { handleClose(); saveAddTodo(); }}>\n                        Save\n            </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default ModalAddTodo;","C:\\development\\projects\\react\\TodoList-React-Typescript-lvvu\\src\\component\\AlertDialog.tsx",["68","69","70","71","72","73"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { PropsAlertDialog } from '../model/type/todo';\nimport { Todo } from '../model/type/todo';\nimport { gql, useMutation } from '@apollo/client';\n\nconst DELETE_TODO = gql`\n    mutation DeleteTodo($id: ID!) {\n        deleteTodo(id: $id)\n    }\n`;\n\nexport default function AlertDialog(props: PropsAlertDialog) {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const [deleteTodo, { loading, error }] = useMutation(DELETE_TODO);\n\n    const handleDeleteTodo = () => {\n        deleteTodo({ variables: { id: props.todo.id } });\n        props.onChangeRefresh();\n    };\n\n    return (\n        <div>\n            <div className=\"col-2 delete\">\n                {props.minutesCompare <= 0 ? <i className='far fa-calendar-times' data-toggle=\"tooltip\" title=\"Time Out\"></i> : \"\"}\n                {props.minutesCompare <= 15 && props.minutesCompare > 0 ?\n                    <img src=\"../../Alarm_Clock.gif\" className=\"alert-deadline\" data-toggle=\"tooltip\" title={props.minutesCompare + ' minutes left before the deadline'} /> : \"\"}\n                <i className='fas fa-trash-alt' data-toggle=\"tooltip\" title=\"Delete\" onClick={handleClickOpen}></i>\n            </div>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to remove Item?\"}</DialogTitle>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={() => { handleClose(); handleDeleteTodo(); }} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":46,"column":3,"nodeType":"82","endLine":46,"endColumn":12,"suggestions":"86"},{"ruleId":"80","severity":1,"message":"87","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":14},{"ruleId":"80","severity":1,"message":"88","line":2,"column":38,"nodeType":"82","messageId":"83","endLine":2,"endColumn":44},{"ruleId":"80","severity":1,"message":"89","line":4,"column":38,"nodeType":"82","messageId":"83","endLine":4,"endColumn":53},{"ruleId":"80","severity":1,"message":"90","line":37,"column":33,"nodeType":"82","messageId":"83","endLine":37,"endColumn":40},{"ruleId":"80","severity":1,"message":"91","line":37,"column":42,"nodeType":"82","messageId":"83","endLine":37,"endColumn":47},{"ruleId":"80","severity":1,"message":"92","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":19},{"ruleId":"80","severity":1,"message":"87","line":6,"column":29,"nodeType":"82","messageId":"83","endLine":6,"endColumn":33},{"ruleId":"80","severity":1,"message":"93","line":28,"column":12,"nodeType":"82","messageId":"83","endLine":28,"endColumn":24},{"ruleId":"80","severity":1,"message":"94","line":29,"column":11,"nodeType":"82","messageId":"83","endLine":29,"endColumn":30},{"ruleId":"84","severity":1,"message":"95","line":33,"column":5,"nodeType":"82","endLine":33,"endColumn":14,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":49,"column":32,"nodeType":"99","messageId":"100","endLine":49,"endColumn":34},{"ruleId":"97","severity":1,"message":"98","line":56,"column":28,"nodeType":"99","messageId":"100","endLine":56,"endColumn":30},{"ruleId":"97","severity":1,"message":"98","line":63,"column":32,"nodeType":"99","messageId":"100","endLine":63,"endColumn":34},{"ruleId":"80","severity":1,"message":"101","line":70,"column":17,"nodeType":"82","messageId":"83","endLine":70,"endColumn":18},{"ruleId":"80","severity":1,"message":"90","line":97,"column":23,"nodeType":"82","messageId":"83","endLine":97,"endColumn":30},{"ruleId":"80","severity":1,"message":"91","line":97,"column":32,"nodeType":"82","messageId":"83","endLine":97,"endColumn":37},{"ruleId":"80","severity":1,"message":"102","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":21},{"ruleId":"80","severity":1,"message":"103","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":25},{"ruleId":"80","severity":1,"message":"87","line":9,"column":10,"nodeType":"82","messageId":"83","endLine":9,"endColumn":14},{"ruleId":"80","severity":1,"message":"90","line":29,"column":26,"nodeType":"82","messageId":"83","endLine":29,"endColumn":33},{"ruleId":"80","severity":1,"message":"91","line":29,"column":35,"nodeType":"82","messageId":"83","endLine":29,"endColumn":40},{"ruleId":"104","severity":1,"message":"105","line":41,"column":21,"nodeType":"106","endLine":41,"endColumn":172},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],["107"],["108"],"@typescript-eslint/no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTodoList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.",["109"],"'Todo' is defined but never used.","'useRef' is defined but never used.","'TodoIsCompleted' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'AlertDialog' is defined but never used.","'listTypeTodo' is assigned a value but never used.","'rows' is assigned a value but never used.","React Hook useEffect contains a call to 'setListType'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.",["110"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'d' is assigned a value but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"111","fix":"113"},"Add dependencies array: [data]",{"range":"114","text":"115"},{"range":"116","text":"115"},[1616,1616],", [data]",[1081,1081]]